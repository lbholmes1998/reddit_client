import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchSubreddits} from '../../api/redditAPI';


export const getSubs = createAsyncThunk(
    'subreddits/getSubs',
    async () => {
        const response = await fetchSubreddits();
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

// TODO - rewrite this so all subreddits are fetched from the subreddits.js file and not here
//       This file will be used to store information on the currently selected subreddit

export const subredditsSlice = createSlice({
    name: 'subreddits',
    initialState: {
        subreddits: {},  // Objects keyed by sub id
        selected: '', // Currently selected subreddit, default to popular
        error: false,
        loading: false
    },
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getSubs.pending, (state) => {
                state.loading = true;
                state.error = false;
            })
            .addCase(getSubs.fulfilled, (state, action) => {
                state.loading = false;
                const subreddits = action.payload // array of objects keyed by a number
                subreddits.map((subreddit) => {
                    const {id, title, url} = subreddit.data

                    let img = !subreddit.data.icon_img ? "../../icons/reddit_default.png" : subreddit.data.icon_img

                    state.subreddits[id] = {
                        id: id,
                        title: title,
                        url: url.slice(0, -1), // Remove trailing '/'
                        icon: img // TODO - replace any missing icons with default reddit icon
                    }
                })
            })
            .addCase(getSubs.rejected, (state) => {
                state.loading = false
                state.error = true
                state.subreddits = {}
            })
    },
});

export const {selectSub} = subredditsSlice.actions;

export const selectSubreddits = (state) => state.subreddits.subreddits;
export const selectedSubreddit = (state) => state.subreddits.selected
export const selectSubById = (id) => (state) => state.subreddits.subreddits[id]
export const selectLoading = (state) => state.subreddits.loading
export const selectError = (state) => state.subreddits.error


export default subredditsSlice.reducer;