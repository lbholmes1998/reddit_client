import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPopularPosts, fetchDummyJson } from '../../api/redditAPI';

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPopular = createAsyncThunk(
    'popular/fetchPopular',
    async () => {
        const response = await fetchPopularPosts();
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const fetchDummy = createAsyncThunk(
    'popular/fetchDummy',
    async () => {
        const response = await fetchDummyJson();
        // The value we return becomes the `fulfilled` action payload
        return response;
    }
);

export const popularSlice = createSlice({
    name: 'popular',
    initialState: {
        posts: {},
        error: false,
        loading: false
    },
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchPopular.pending, (state) => {
                state.loading = true;
                state.error = false;
            })
            .addCase(fetchPopular.fulfilled, (state, action) => {
                state.loading = false;
                const posts = action.payload // array of objects keyed by a number
                posts.map((post) => {
                    const {id, title, ups, subreddit_name_prefixed} = post.data
                    state.posts[id] = {
                        id: id,
                        title: title,
                        upvote: ups,
                        subreddit: subreddit_name_prefixed
                    }
                })
            })
            .addCase(fetchPopular.rejected, (state) => {
                state.loading = false
                state.error = true
                state.data = {}
            })
            .addCase(fetchDummy.pending, (state) => {
                state.loading = true;
                state.error = false;
            })
            .addCase(fetchDummy.fulfilled, (state, action) => {
                state.loading = false;
                state.data = action.payload;
            })
            .addCase(fetchDummy.rejected, (state) => {
                state.loading = false
                state.error = true
                state.data = {}
            })
    },
});

export const { } = popularSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPopularPosts = (state) => state.popular.posts;
export const selectLoading = (state) => state.popular.loading


export default popularSlice.reducer;